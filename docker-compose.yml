version: "3.8"
services:
  # PostgresSQL API service
  postgres:
    image: postgres:latest
    environment:
      POSTGRES_DB: api-transfers
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 12345
    ports:
      - "5432:5432"
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
    networks:
      - API-network
  # Api build service
  API:
    image: api-service
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      - postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_SCHEMAS: ${POSTGRES_SCHEMAS}
      HOST: ${HOST}
      USERNAME: ${USERNAME}
      PASSWORD: ${PASSWORD}
      MAIL_USERNAME: ${MAIL_USERNAME}
      MAIL_PASSWORD: ${MAIL_PASSWORD}
      NAPAS_URL: ${NAPAS_URL}
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
    ports:
      - "8080:8080"
    networks:
      - API-network


  postgres-1:
    image: postgres:latest
    environment:
      POSTGRES_DB: napas
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 12345
    ports:
      - "5433:5432"
    volumes:
      #      - ../docker-postgresql-multiple-databases:/docker-entrypoint-initdb.d
      - ./postgres-1-data:/var/lib/postgresql/data
    #      - ./init-schemas.sql:/docker-entrypoint-initdb.d/init-schemas.sql
    networks:
      - API-network
  # Napas service
  napas:
    image: napas-service
    depends_on:
      - postgres-1
    environment:
      POSTGRES_DB: jdbc:postgresql://postgres-1:5432/napas
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "8083:8083"
    networks:
      - API-network
  zookeeper-01:
    image: confluentinc/cp-zookeeper
    hostname: zookeeper-01
    container_name: zookeeper-01
    ports:
      - "2181:2181"
    networks:
      - API-network
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zookeeper-01:2888:3888;zookeeper-02:2888:3888;zookeeper-03:2888:3888

  zookeeper-02:
    image: confluentinc/cp-zookeeper
    hostname: zookeeper-02
    container_name: zookeeper-02
    ports:
      - "2182:2181"
    networks:
      - API-network
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 2
      ZOOKEEPER_SERVERS: zookeeper-01:2888:3888; zookeeper-02:2888:3888; zookeeper-03:2888:3888

  zookeeper-03:
    image: confluentinc/cp-zookeeper
    hostname: zookeeper-03
    container_name: zookeeper-03
    ports:
      - "2183:2181"
    networks:
      - API-network
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 3
      ZOOKEEPER_SERVERS: zookeeper-01:2888:3888; zookeeper-02:2888:3888; zookeeper-03:2888:3888
  kafka-broker-01:
    image: confluentinc/cp-kafka
    hostname: kafka-broker-01
    container_name: kafka-broker-01
    ports:
      - "9092:9092"
      - "29092:29092"
      - "9999:9999"
    networks:
      - API-network
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-broker-01:19092,EXTERNAL://localhost:9092,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-01:2181,zookeeper-02:2181,zookeeper-03:2181
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: kafka-broker-01
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: true
    depends_on:
      - zookeeper-01
      - zookeeper-02
      - zookeeper-03

# Create a network to allow inter-container communication
networks:
  API-network:
    driver: bridge